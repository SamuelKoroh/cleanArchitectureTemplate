// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Physiqube.Infrastructure.Data;

#nullable disable

namespace Physiqube.Infrastructure.Data.Migrations
{
    [DbContext(typeof(PhysiqubeDbContext))]
    [Migration("20240311205302_SeedCorrectActivityTypeData")]
    partial class SeedCorrectActivityTypeData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Physiqube.Domain.Activities.Activity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ActivityTypeId")
                        .HasColumnType("int");

                    b.Property<Guid>("AthleteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("BurnedCalories")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("time");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("ActivityTypeId");

                    b.HasIndex("AthleteId");

                    b.ToTable("Activities");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Activity");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Physiqube.Domain.Activities.ActivityType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FriendlyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ActivityType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FriendlyName = "Walking",
                            Type = "Walking"
                        },
                        new
                        {
                            Id = 2,
                            FriendlyName = "Cycling",
                            Type = "Cycling"
                        });
                });

            modelBuilder.Entity("Physiqube.Domain.Athletes.Athlete", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("IdentityId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfilePhoto")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Athletes");
                });

            modelBuilder.Entity("Physiqube.Domain.Activities.Cycling", b =>
                {
                    b.HasBaseType("Physiqube.Domain.Activities.Activity");

                    b.HasDiscriminator().HasValue("Cycling");
                });

            modelBuilder.Entity("Physiqube.Domain.Activities.Walking", b =>
                {
                    b.HasBaseType("Physiqube.Domain.Activities.Activity");

                    b.Property<int>("Steps")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("Walking");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Physiqube.Domain.Activities.Activity", b =>
                {
                    b.HasOne("Physiqube.Domain.Activities.ActivityType", "ActivityType")
                        .WithMany()
                        .HasForeignKey("ActivityTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Physiqube.Domain.Athletes.Athlete", "Athlete")
                        .WithMany("Activities")
                        .HasForeignKey("AthleteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ActivityType");

                    b.Navigation("Athlete");
                });

            modelBuilder.Entity("Physiqube.Domain.Athletes.Athlete", b =>
                {
                    b.OwnsOne("Physiqube.Common.Types.Weight", "Weight", b1 =>
                        {
                            b1.Property<Guid>("AthleteId")
                                .HasColumnType("uniqueidentifier");

                            b1.HasKey("AthleteId");

                            b1.ToTable("Athletes");

                            b1.ToJson("Weight");

                            b1.WithOwner()
                                .HasForeignKey("AthleteId");
                        });

                    b.OwnsOne("Physiqube.Common.Types.Height", "Height", b1 =>
                        {
                            b1.Property<Guid>("AthleteId")
                                .HasColumnType("uniqueidentifier");

                            b1.HasKey("AthleteId");

                            b1.ToTable("Athletes");

                            b1.ToJson("Height");

                            b1.WithOwner()
                                .HasForeignKey("AthleteId");
                        });

                    b.OwnsOne("Physiqube.Domain.Athletes.Location", "Location", b1 =>
                        {
                            b1.Property<Guid>("AthleteId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("City")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Country")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Region")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("AthleteId");

                            b1.ToTable("Athletes");

                            b1.ToJson("Location");

                            b1.WithOwner()
                                .HasForeignKey("AthleteId");
                        });

                    b.OwnsOne("Physiqube.Domain.Athletes.ProfileSettings", "ProfileSettings", b1 =>
                        {
                            b1.Property<Guid>("AthleteId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("PreferredMeasurementSystem")
                                .HasColumnType("int");

                            b1.Property<string>("PreferredTimezone")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("AthleteId");

                            b1.ToTable("Athletes");

                            b1.ToJson("ProfileSettings");

                            b1.WithOwner()
                                .HasForeignKey("AthleteId");
                        });

                    b.Navigation("Height");

                    b.Navigation("Location");

                    b.Navigation("ProfileSettings");

                    b.Navigation("Weight");
                });

            modelBuilder.Entity("Physiqube.Domain.Activities.Cycling", b =>
                {
                    b.OwnsOne("Physiqube.Common.Types.Speed", "AverageSpeed", b1 =>
                        {
                            b1.Property<Guid>("CyclingId")
                                .HasColumnType("uniqueidentifier");

                            b1.HasKey("CyclingId");

                            b1.ToTable("Activities");

                            b1.ToJson("AverageSpeed");

                            b1.WithOwner()
                                .HasForeignKey("CyclingId");
                        });

                    b.OwnsOne("Physiqube.Common.Types.Height", "ElevationGain", b1 =>
                        {
                            b1.Property<Guid>("CyclingId")
                                .HasColumnType("uniqueidentifier");

                            b1.HasKey("CyclingId");

                            b1.ToTable("Activities");

                            b1.ToJson("ElevationGain");

                            b1.WithOwner()
                                .HasForeignKey("CyclingId");
                        });

                    b.OwnsOne("Physiqube.Common.Types.Height", "ElevationLoss", b1 =>
                        {
                            b1.Property<Guid>("CyclingId")
                                .HasColumnType("uniqueidentifier");

                            b1.HasKey("CyclingId");

                            b1.ToTable("Activities");

                            b1.ToJson("ElevationLoss");

                            b1.WithOwner()
                                .HasForeignKey("CyclingId");
                        });

                    b.OwnsOne("Physiqube.Common.Types.Speed", "MaxSpeed", b1 =>
                        {
                            b1.Property<Guid>("CyclingId")
                                .HasColumnType("uniqueidentifier");

                            b1.HasKey("CyclingId");

                            b1.ToTable("Activities");

                            b1.ToJson("MaxSpeed");

                            b1.WithOwner()
                                .HasForeignKey("CyclingId");
                        });

                    b.OwnsOne("Physiqube.Common.Types.Distance", "TripDistance", b1 =>
                        {
                            b1.Property<Guid>("CyclingId")
                                .HasColumnType("uniqueidentifier");

                            b1.HasKey("CyclingId");

                            b1.ToTable("Activities");

                            b1.ToJson("TripDistance");

                            b1.WithOwner()
                                .HasForeignKey("CyclingId");
                        });

                    b.Navigation("AverageSpeed");

                    b.Navigation("ElevationGain");

                    b.Navigation("ElevationLoss");

                    b.Navigation("MaxSpeed");

                    b.Navigation("TripDistance");
                });

            modelBuilder.Entity("Physiqube.Domain.Activities.Walking", b =>
                {
                    b.OwnsOne("Physiqube.Common.Types.Distance", "WalkedDistance", b1 =>
                        {
                            b1.Property<Guid>("WalkingId")
                                .HasColumnType("uniqueidentifier");

                            b1.HasKey("WalkingId");

                            b1.ToTable("Activities");

                            b1.ToJson("WalkedDistance");

                            b1.WithOwner()
                                .HasForeignKey("WalkingId");
                        });

                    b.Navigation("WalkedDistance");
                });

            modelBuilder.Entity("Physiqube.Domain.Athletes.Athlete", b =>
                {
                    b.Navigation("Activities");
                });
#pragma warning restore 612, 618
        }
    }
}
